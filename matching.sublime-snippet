<snippet>
	<content>
		<![CDATA[
struct MaxMatch {
	vvi adj;
	vb vis;
	vi bull, cow;
	int B, C, start;
	MaxMatch(int n, int m, int start = 1) {
		this -> B = n;
		this -> C = m;
		this -> start = start;
		adj.resize(n + start);
		vis.resize(n + start);
		cow.resize(n + start, -1);
		bull.resize(m + start, -1);
	}
	void add_edge(int u, int v) {
		adj[u].pb(v);
	}

	bool dfs(int u) {
		if (vis[u]) return 0;
		vis[u] = 1;
		for (int &v : adj[u]) {
			if (bull[v] == -1) {
				bull[v] = u;
				cow[u] = v;
				return 1;
			}
		}
		for (int &v : adj[u]) {
			if (dfs(bull[v])) {
				vis[u] = 0;
				bull[v] = u;
				cow[u] = v;
				return 1;
			}
		}
		return 0;
	}
	vii solve() {
		bool done = 0;
		do {
			done = 1;
			fill(all(vis), 0);
			rep(i, B) {
				if (cow[i + start] == -1 && dfs(i + start)) {
					done = 0;
				}
			}
		} while (!done);
		vii pairs;
		rep(i, B) if (cow[i + start] != -1) {
			pairs.pb({i + start, cow[i + start]});
		}
		return pairs;
	}
};
]]>
	</content>
	<tabTrigger>#matching</tabTrigger>
	<scope> source.c++ </scope>
</snippet>