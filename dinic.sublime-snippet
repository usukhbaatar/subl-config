<snippet>
	<content>
		<![CDATA[
struct MaxFlow {
	struct Edge {
	int u, v, cap, flow;
		Edge(int u, int v, int c) : flow(0) {
			this -> u = u;
			this -> v = v;
			this -> cap = c;
		}
	};

	int n, source, sink;
	vector<Edge> edges;
	vvi adj;
	vector<vi::iterator> it;
	vi dist;

	MaxFlow(int n, int start = 1) {
		this -> n = n;
		adj.resize(n + start);
		it.resize(n + start);
		dist.resize(n + start);
	}

	void add_edge(int u, int v, int e) {
		if (u == v) return;
		edges.emplace_back(u, v, e);
		adj[u].pb(edges.size() - 1);
	}

	bool bfs() {
		memset(&dist[0], -1, sizeof(dist[0]) * dist.size());
		dist[source] = 0;
		queue<int> q;
		q.push(source);
		while(!q.empty()) {
			int u = q.front(); q.pop();
			for (auto &i : adj[u]) {
				Edge &e = edges[i];
				if (e.flow < e.cap && dist[e.v] == -1) {
					dist[e.v] = dist[u] + 1;
					q.push(edges[i].v);
				}
			}
		}
		return dist[sink] != -1;
	}

	int dfs(int u, int val) {
		if (u == sink) return val;
		for (; it[u] != adj[u].end(); it[u]++) {
			int &i = *it[u], path;
			Edge &e = edges[i];
			if (e.flow < e.cap && dist[e.v] == dist[u] + 1) {
				path = dfs(e.v, min(val, e.cap - e.flow));
				if (path > 0) {
					e.flow += path;
					edges[i ^ 1].flow -= path;
					return path;
				}
			}
		}
		return 0;
	}
	int dinic(int source, int sink) {
		this -> source = source;
		this -> sink = sink;
		int max_flow = 0;
		while (bfs()) {
			rep(i, n) it[i] = adj[i].begin();
			while (true) {
				int path = dfs(source, oo);
				if(path == 0) break;
				max_flow += path;
			}
		}
		return max_flow;
	}
    vii cut() {
        vii res;
        bfs();
        for (Edge &e : edges) {
            if (dist[e.u] >= 0 && dist[e.v] == -1) {
                res.pb({e.u, e.v});
            }
        }
        return res;
    }
};
]]>
	</content>
	<tabTrigger>#dinic</tabTrigger>
	<scope> source.c++ </scope>
</snippet>