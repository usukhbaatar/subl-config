<snippet>
	<content>
		<![CDATA[
pii meta(int i) { return {(i << 1) + 1, (i + 1) << 1}; }
tuple<int, int, int> meta(int i, int l, int r) {
	pii m = meta(i); return { m.ff, m.ss, (l + r) / 2 };
}
void merge(int, int, int);
int merge(int, int);

vi a, val;
void init(int n) {
	val.resize((n + 1) << 2, 0);
	a.resize(n + 1, 0);
}

void build(int i, int tl, int tr) {
	if (tl == tr) { val[i] = a[tl]; return; }
	auto [x, y, tm] = meta(i, tl, tr);
	build(x, tl, tm);
	build(y, tm + 1, tr);
	merge(i, x, y);
}

void update(int i, int tl, int tr, int k, int t) {
	if (tl == tr) { val[i] = t; return; }
	auto [x, y, tm] = meta(i, tl,  tr);
	if (k <= tm) update(x, tl, tm, k, t);
	else update(y, tm + 1, tr, k, t);
	merge(i, x, y);
}

int query(int i, int tl, int tr, int l, int r) {
	if (tl == l && r == tr) return val[i];
	auto [x, y, tm] = meta(i, tl, tr);
	if (r <= tm) return query(x, tl, tm, l, r);
	else if (tm + 1 <= l) return query(y, tm + 1, tr, l, r);
	return merge(query(x, tl, tm, l, tm), query(y, tm + 1, tr, tm + 1, r));
}

void merge(int i, int x, int y) {
	val[i] = val[x] + val[y];
}

int merge(int x, int y) {
	return x + y;
}
]]>
	</content>
	<tabTrigger>#segtree</tabTrigger>
	<scope> source.c++ </scope>
</snippet>